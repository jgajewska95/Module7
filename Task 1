class BaseContact:

  def __init__(self, name, surname, phone, email):
    self.name = name
    self.surname = surname
    self.phone = phone
    self.email = email


wizytowka = BaseContact(name="Jessica",
                        surname="Clark",
                        phone="605234558",
                        email="bettybuckley@yahoo.com")
print(wizytowka)

print(wizytowka.name)


class BaseContact:

  def __init__(self, name, surname, phone, email):
    self.name = name
    self.surname = surname
    self.phone = phone
    self.email = email

  def contact(self):
    print(f'Wybieram numer +48 {self.phone} i dzwonię do {self.name}')


class BusinessContact(BaseContact):

  def __init__(self, job_title, company_name, business_phone, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.job_title = job_title
    self.company_name = company_name
    self.business_phone = business_phone

  def contact(self):
    print(
      f'Wybieram numer służbowy +48 {self.business_phone} i dzwonię do {self.company_name}'
    )
  @property
  def label_length(self):
    return len(self.name)
    return len(self.surname)


class FakeUserData:

  def __init__(self, fake):
    job_title = fake.job()
    company_name = fake.company()
    email = fake.email()
    name = fake.name()
    surname = fake.surname()
    business_phone = fake.msisdn()
    phone = fake.msisdn()

    list_of_contacts = []
    for i in range(fake):
      if self:
        card = BusinessContact(name, surname, phone, email, job_title,
                               company_name, business_phone)
      else:
        card = BaseContact(name, surname, phone, email)
      list_of_contacts.append(card)

    return list_of_contacts
